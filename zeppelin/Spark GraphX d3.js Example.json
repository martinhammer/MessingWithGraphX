{
  "paragraphs": [
    {
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1477585251203_257790950",
      "id": "20161027-202051_1812784447",
      "dateCreated": "2016-10-27T20:20:51+0400",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:2551",
      "text": "%md\nApache Zeppelin plus d3.js\n==========================\nThis is an example of graph visualisation from the book \"Spark GraphX in Action\".",
      "dateUpdated": "2016-10-27T20:21:49+0400",
      "dateFinished": "2016-10-27T20:21:44+0400",
      "dateStarted": "2016-10-27T20:21:43+0400",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h1>Apache Zeppelin plus d3.js</h1>\n<p>This is an example of graph visualisation from the book &ldquo;Spark GraphX in Action&rdquo;.</p>\n"
      }
    },
    {
      "text": "%spark\nimport org.apache.spark.graphx._\nimport scala.reflect.ClassTag\ndef drawGraph[VD:ClassTag,ED:ClassTag](g:Graph[VD,ED]) = {\nval u = java.util.UUID.randomUUID\nval v = g.vertices.collect.map(_._1)\nprintln(\"\"\"%html\n<div id='a\"\"\" + u + \"\"\"' style='width:960px; height:500px'></div>\n<style>\n\t.node circle { fill: gray; }\n\t.node text { \n\t\tfont: 10px sans-serif;\n\t\ttext-anchor: middle;\n\t\tfill: white; \n\t}\n\tline.link { \n\t\tstroke: gray;\n\t\tstroke-width: 1.5px; \n\t}\n</style>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\tvar width = 960, height = 500;\n\tvar svg = d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\tvar nodes = [\"\"\" + v.map(\"{id:\" + _ + \"}\").mkString(\",\") + \"\"\"];\n\tvar links = [\"\"\" + g.edges.collect.map(\n\t\te => \"{source:nodes[\" + v.indexWhere(_ == e.srcId) + \"],target:nodes[\" +\n\t\tv.indexWhere(_ == e.dstId) + \"]}\").mkString(\",\") + \"\"\"];\n\tvar link = svg.selectAll(\".link\").data(links);\n\tlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n\tvar node = svg.selectAll(\".node\").data(nodes);\n\tvar nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\")\n\tnodeEnter.append(\"circle\").attr(\"r\", 8);\n\tnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\n\t.text(function(d) { return d.id; });\n\td3.layout.force().linkDistance(50).charge(-200).chargeDistance(300)\n\t.friction(0.95).linkStrength(0.5).size([width, height])\n\t.on(\"tick\", function() {\n\t\tlink.attr(\"x1\", function(d) { return d.source.x; })\n\t\t.attr(\"y1\", function(d) { return d.source.y; })\n\t\t.attr(\"x2\", function(d) { return d.target.x; })\n\t\t.attr(\"y2\", function(d) { return d.target.y; });\n\t\tnode.attr(\"transform\", function(d) {\n\t\t\treturn \"translate(\" + d.x + \",\" + d.y + \")\";\n\t\t});\n\t}).nodes(nodes).links(links).start();\n</script>\n\"\"\")\n}\n",
      "dateUpdated": "2016-10-27T20:21:58+0400",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "lineNumbers": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1477584416860_2125738637",
      "id": "20161027-200656_1838765450",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.apache.spark.graphx._\n\nimport scala.reflect.ClassTag\n\ndrawGraph: [VD, ED](g: org.apache.spark.graphx.Graph[VD,ED])(implicit evidence$1: scala.reflect.ClassTag[VD], implicit evidence$2: scala.reflect.ClassTag[ED])Unit\n"
      },
      "dateCreated": "2016-10-27T08:06:56+0400",
      "dateStarted": "2016-10-27T08:10:08+0400",
      "dateFinished": "2016-10-27T08:10:10+0400",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:2311"
    },
    {
      "text": "%spark\ndrawGraph(org.apache.spark.graphx.util.GraphGenerators.rmatGraph(sc,32,60))",
      "dateUpdated": "2016-10-27T20:22:12+0400",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1477584472987_-382931461",
      "id": "20161027-200752_1427222443",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<div id='aea5ce6a9-5040-41b0-a29b-a65d943f4ad4' style='width:960px; height:500px'></div>\n<style>\n\t.node circle { fill: gray; }\n\t.node text { \n\t\tfont: 10px sans-serif;\n\t\ttext-anchor: middle;\n\t\tfill: white; \n\t}\n\tline.link { \n\t\tstroke: gray;\n\t\tstroke-width: 1.5px; \n\t}\n</style>\n<script src=\"//d3js.org/d3.v3.min.js\"></script>\n<script>\n\tvar width = 960, height = 500;\n\tvar svg = d3.select(\"#aea5ce6a9-5040-41b0-a29b-a65d943f4ad4\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\tvar nodes = [{id:16},{id:28},{id:24},{id:20},{id:21},{id:25},{id:29},{id:17},{id:22},{id:30},{id:18},{id:26},{id:19},{id:27},{id:23},{id:31}];\n\tvar links = [{source:nodes[0],target:nodes[3]},{source:nodes[0],target:nodes[4]},{source:nodes[7],target:nodes[12]},{source:nodes[12],target:nodes[13]},{source:nodes[3],target:nodes[1]},{source:nodes[4],target:nodes[7]},{source:nodes[4],target:nodes[6]},{source:nodes[8],target:nodes[8]},{source:nodes[14],target:nodes[10]},{source:nodes[2],target:nodes[0]},{source:nodes[2],target:nodes[14]},{source:nodes[11],target:nodes[3]},{source:nodes[13],target:nodes[10]},{source:nodes[13],target:nodes[12]},{source:nodes[1],target:nodes[5]},{source:nodes[0],target:nodes[7]},{source:nodes[0],target:nodes[10]},{source:nodes[0],target:nodes[2]},{source:nodes[0],target:nodes[6]},{source:nodes[7],target:nodes[0]},{source:nodes[7],target:nodes[15]},{source:nodes[12],target:nodes[10]},{source:nodes[3],target:nodes[14]},{source:nodes[4],target:nodes[4]},{source:nodes[2],target:nodes[13]},{source:nodes[2],target:nodes[1]},{source:nodes[5],target:nodes[7]},{source:nodes[5],target:nodes[13]},{source:nodes[13],target:nodes[11]},{source:nodes[1],target:nodes[1]},{source:nodes[7],target:nodes[7]},{source:nodes[7],target:nodes[10]},{source:nodes[10],target:nodes[14]},{source:nodes[12],target:nodes[5]},{source:nodes[3],target:nodes[0]},{source:nodes[3],target:nodes[3]},{source:nodes[8],target:nodes[10]},{source:nodes[14],target:nodes[7]},{source:nodes[14],target:nodes[8]},{source:nodes[5],target:nodes[0]},{source:nodes[5],target:nodes[3]},{source:nodes[11],target:nodes[2]},{source:nodes[11],target:nodes[11]},{source:nodes[6],target:nodes[3]},{source:nodes[9],target:nodes[9]},{source:nodes[0],target:nodes[0]},{source:nodes[10],target:nodes[10]},{source:nodes[3],target:nodes[7]},{source:nodes[3],target:nodes[12]},{source:nodes[3],target:nodes[4]},{source:nodes[3],target:nodes[2]},{source:nodes[2],target:nodes[2]},{source:nodes[11],target:nodes[10]},{source:nodes[1],target:nodes[3]},{source:nodes[6],target:nodes[14]},{source:nodes[9],target:nodes[10]},{source:nodes[9],target:nodes[4]},{source:nodes[9],target:nodes[8]},{source:nodes[15],target:nodes[4]},{source:nodes[15],target:nodes[14]}];\n\tvar link = svg.selectAll(\".link\").data(links);\n\tlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n\tvar node = svg.selectAll(\".node\").data(nodes);\n\tvar nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\")\n\tnodeEnter.append(\"circle\").attr(\"r\", 8);\n\tnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\n\t.text(function(d) { return d.id; });\n\td3.layout.force().linkDistance(50).charge(-200).chargeDistance(300)\n\t.friction(0.95).linkStrength(0.5).size([width, height])\n\t.on(\"tick\", function() {\n\t\tlink.attr(\"x1\", function(d) { return d.source.x; })\n\t\t.attr(\"y1\", function(d) { return d.source.y; })\n\t\t.attr(\"x2\", function(d) { return d.target.x; })\n\t\t.attr(\"y2\", function(d) { return d.target.y; });\n\t\tnode.attr(\"transform\", function(d) {\n\t\t\treturn \"translate(\" + d.x + \",\" + d.y + \")\";\n\t\t});\n\t}).nodes(nodes).links(links).start();\n</script>\n\n"
      },
      "dateCreated": "2016-10-27T08:07:52+0400",
      "dateStarted": "2016-10-27T08:10:33+0400",
      "dateFinished": "2016-10-27T08:10:34+0400",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:2312"
    },
    {
      "text": "",
      "dateUpdated": "2016-10-27T08:08:23+0400",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1477584492853_-1789357257",
      "id": "20161027-200812_1473983282",
      "dateCreated": "2016-10-27T08:08:12+0400",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:2313"
    }
  ],
  "name": "Spark GraphX d3.js Example",
  "id": "2BY75W87T",
  "angularObjects": {
    "2C1VPCX6D:shared_process": [],
    "2BY59RJET:shared_process": [],
    "2C2TGG5MU:shared_process": [],
    "2BZQ1338A:shared_process": [],
    "2C28V2U22:shared_process": [],
    "2C1WRMG2T:shared_process": [],
    "2BYZ5UE27:shared_process": [],
    "2C16TWAX4:shared_process": [],
    "2C19YMA8R:shared_process": [],
    "2BZNHUBAU:shared_process": [],
    "2C19KCTR4:shared_process": [],
    "2C2KDTVPV:shared_process": [],
    "2BZMVDFS8:shared_process": [],
    "2C1VXZVPN:shared_process": [],
    "2BYWBEBMS:shared_process": [],
    "2BYD14W5B:shared_process": [],
    "2BYKCWJ97:shared_process": [],
    "2C1V5DZES:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}